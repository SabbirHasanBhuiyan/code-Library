//the graph should not have any edge with negative weight 
//for sparse graph E<<V^2
//O((V + E) log E)
const int N=1e5+1;
vector<pair<int,int> > adj[N];
int dist[N],parent[N];
void disjktra(int s,int n)
{
    for(int i=1;i<=n;i++) {dist[i]=infLL;parent[i]=-1;}
    dist[s]=0;
    priority_queue<pair<int,int> ,vector<pair<int,int> > ,greater<pair<int,int> > >pq;
    pq.push({0,s});
    int u,curD,v,w;
    while(!pq.empty()){
        u=pq.top().S,curD=pq.top().F;
        pq.pop();
        if(dist[u]!=curD) continue;
        for(auto &x: adj[u]){
            v=x.F,w=x.S;
            if(dist[v]>(curD+w)){
                dist[v]=curD+w;
                pq.push({dist[v],v});
                parent[v]=u;
            }
        }
    }
}
vector<int>restore_path(int s,int t)
{
    vector<int>path;
    for(int v=t;v!=s;v=parent[v]){
        path.PB(v);
    }
    path.PB(s);
    reverse(path.begin(),path.end());
    return path;
}

