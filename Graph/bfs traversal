
///   ***   ---   |||         In the name of ALLAH        |||   ---   ***   ///

/*
https://www.hackerearth.com/practice/algorithms/graphs/breadth-first-search/practice-problems/algorithm/monk-and-the-islands/
*/


#include<bits/stdc++.h>
using namespace std;

const int inf = 2000000000;

const int mx = 1e4+1;
vector<int> adj[mx];
int dist[mx],vis[mx];
int par[mx];

void bfs ( int s ,int n)
{
    for(int i=1;i<=n;i++)   vis[i]=1;
    for(int i=1;i<=n;i++)   dist[i]=inf; //inf has been declared as 2e9 above
    for(int i=1;i<=n;i++)   par[i]=i;

    vis[s]=2;
    dist[s]=0;
    par[s]=s;

    queue<int> q;
    q.push( s );

    while ( !q.empty() ) {
        int u = q.front();
        q.pop();

        for ( auto v : adj[u] ) {
            if (vis[v] ==1) {
                vis[v]=2;
                dist[v]=dist[u]+1;
                par[v]=u;
                q.push(v);

            }
        }
        vis[u]=3;
    }
}


int main()
{


    int n ,t , m;
    cin>>t;

    while(t--){
        cin >> n >> m;

        for(int i=1;i<=n;i++)   adj[i].clear();
        for ( int i = 1; i <= m; i++ ) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back ( v );
            adj[v].push_back ( u );
        }

        bfs (1,n);

        cout<<dist[n]<<endl;

    }



    return 0;
}
